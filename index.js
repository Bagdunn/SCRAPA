const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const prompt = require("prompt-sync")();

const config = JSON.parse(fs.readFileSync("config.json", "utf8"));
const apiId = config.api_id;
const apiHash = config.api_hash;
const forwardChatId = BigInt(config.forward_chat_id);
const channelIds = new Set(config.channels.map(id => BigInt(id)));

let session = new StringSession("");
if (fs.existsSync("session.json")) {
    session = new StringSession(fs.readFileSync("session.json", "utf8"));
}

const client = new TelegramClient(session, apiId, apiHash, {
    connectionRetries: 5,
});

(async () => {
    await client.start({
        phoneNumber: () => prompt("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: "),
        password: () => prompt("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å (—è–∫—â–æ —î): "),
        phoneCode: () => prompt("–í–≤–µ–¥–∏ –∫–æ–¥ –∑ Telegram: "),
        onError: (err) => console.log(err),
    });

    console.log("‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π!");
    fs.writeFileSync("session.json", client.session.save());

    console.log("üì° –°–ª—É—Ö–∞—î–º–æ –∫–∞–Ω–∞–ª–∏...");

    client.addEventHandler(async (update) => {
        if (update.className === "UpdateNewChannelMessage") {
            const message = update.message;

            if (!message || !message.peerId || !message.peerId.channelId) {
                console.log("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π channelId");
                return;
            }

            const rawChannelId = message.peerId.channelId; // –û—Ç—Ä–∏–º–∞–Ω–∏–π ID –±–µ–∑ -100
            const formattedChannelId = BigInt(`-100${rawChannelId}`); // –î–æ–¥–∞—î–º–æ -100

            if (channelIds.has(formattedChannelId)) {
                console.log(`üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É ${formattedChannelId}`);

                try {
                    const messageId = message.id;
                    console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–∏–π messageId:", messageId);
                    console.log("üì° –í—ñ–¥ –∫–æ–≥–æ –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ (formattedChannelId):", formattedChannelId);
                    console.log("üì§ –ö—É–¥–∏ –ø–µ—Ä–µ—Å–∏–ª–∞—î–º–æ (forwardChatId):", forwardChatId);

                    // –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                    if (!messageId || !forwardChatId) {
                        console.log("‚ö†Ô∏è –ù–µ–º–∞—î messageId –∞–±–æ forwardChatId");
                        return;
                    }

                    // –û—Ç—Ä–∏–º—É—î–º–æ entity –∫–∞–Ω–∞–ª—É –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é
                    const fromPeer = await client.getInputEntity(formattedChannelId);
                    console.log("üîÑ –û—Ç—Ä–∏–º–∞–Ω–∏–π fromPeer:", fromPeer);

                    if (fromPeer.className !== 'InputPeerChannel') {
                        console.log("‚ö†Ô∏è fromPeer –Ω–µ —î InputPeerChannel");
                        return;
                    }

                    // –Ø–∫—â–æ —î –º–µ–¥—ñ–∞, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –π–æ–≥–æ —è–∫ InputMediaPhoto
                    if (message.media && message.media.photo) {
                        const media = message.media.photo;
                        console.log("üì∏ –ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ!");

                        await client.sendMessage(forwardChatId, {
                            message: message.message,
                            media: media,  // –ü–µ—Ä–µ–¥–∞—î–º–æ –º–µ–¥—ñ–∞ —Ä–∞–∑–æ–º –∑ —Ç–µ–∫—Å—Ç–æ–º
                            entities: message.entities,
                        });
                    } else {
                        // –Ø–∫—â–æ –º–µ–¥—ñ–∞ –Ω–µ–º–∞—î, –ø—Ä–æ—Å—Ç–æ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                        await client.sendMessage(forwardChatId, {
                            message: message.message,
                            entities: message.entities,
                        });
                    }

                    console.log("üîÑ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...");
                    console.log("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!");

                } catch (err) {
                    console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", err);
                    console.log("üîç –ü–æ–¥—Ä–æ–±–∏—Ü—ñ –ø–æ–º–∏–ª–∫–∏:", JSON.stringify(err, null, 2));
                }
            }
        }
    });
})();
