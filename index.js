const { TelegramClient } = require("telegram");
const { StringSession } = require("telegram/sessions");
const fs = require("fs");
const prompt = require("prompt-sync")();

const config = JSON.parse(fs.readFileSync("config.json", "utf8"));
const apiId = config.api_id;
const apiHash = config.api_hash;
const forwardChatId = config.forward_chat_id;
const channelIds = new Set(config.channels.map(id => BigInt(id)));

let session = new StringSession("");
if (fs.existsSync("session.json")) {
    session = new StringSession(fs.readFileSync("session.json", "utf8"));
}

const client = new TelegramClient(session, apiId, apiHash, {
    connectionRetries: 5,
});

(async () => {
    await client.start({
        phoneNumber: () => prompt("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: "),
        password: () => prompt("–í–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å (—è–∫—â–æ —î): "),
        phoneCode: () => prompt("–í–≤–µ–¥–∏ –∫–æ–¥ –∑ Telegram: "),
        onError: (err) => console.log(err),
    });

    console.log("‚úÖ –ë–æ—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π!");
    fs.writeFileSync("session.json", client.session.save());

    console.log("üì° –°–ª—É—Ö–∞—î–º–æ –∫–∞–Ω–∞–ª–∏...");

    client.addEventHandler(async (event) => {
        const message = event.message;
        if (!message) return;
    
        console.log("üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è!");
        console.log("üîπ Chat ID:", message.chatId);
        console.log("üîπ –ü–æ–≤–Ω–∏–π –æ–±'—î–∫—Ç:", message.toJSON());
    });

    client.addEventHandler(async (update) => {
        if (update.className === "UpdateNewChannelMessage") {
            const message = update.message;
            const rawChannelId = message.peerId.channelId; // –û—Ç—Ä–∏–º–∞–Ω–∏–π ID –±–µ–∑ -100
            const formattedChannelId = BigInt(`-100${rawChannelId}`); // –î–æ–¥–∞—î–º–æ -100
            
            console.log("rawID")
            console.log(rawChannelId)
            console.log("ID")
            console.log(formattedChannelId);

            console.log("------")
            console.log([...channelIds])

            if (channelIds.has(formattedChannelId)) {
                console.log(`üì© –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É ${formattedChannelId}`);

                try {
                    const entity = await client.getInputEntity(forwardChatId);
                    await client.sendMessage(entity, {
                        message: message.message,
                        entities: message.entities,
                        media: message.media
                    });
                    console.log("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–µ—Ä–µ—Å–ª–∞–Ω–æ!");
                } catch (err) {
                    console.log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", err);
                }
            }
        }
    });
})();
